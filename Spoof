import logging
import subprocess
import re
import platform


class Colors:

	@staticmethod
	def red_color(color):
		return "\033[2;31;10m" + color

	@staticmethod
	def purple_color(color):
		return "\033[1;30;10m" + color

	@staticmethod
	def bright_blue(color):
		return "\033[1;34;10m" + color

	@staticmethod
	def green_color(color):
		return "\033[1;32;10m" + color

	@staticmethod
	def white_color(color):
		return "\033[1;37;10m" + color


class WindowsInfo(Colors):  # dont forget alex about the recieving broadcast packets with sockets 
	def __init__(self):
		super().__init__()

	def get_os_platform(self):
		return platform.system()

	def windows_router_ip(self):
		os_platform = self.get_os_platform()

		if os_platform == "Windows":
			router_ip = subprocess.check_output(["ipconfig", "/all"])
			router_ip = router_ip.decode()
			split_router = re.findall("Default Gateway.*", router_ip)

			windows_router = split_router[0].split(":")[1].strip()
			return windows_router  # returns the routers IP address. 

	def windows_router_mac(self):
		router_ip = self.windows_router_ip()
		arp_cache = subprocess.check_output(["arp", "-a"]).decode()

		index_router = arp_cache.find(router_ip)
		mac_index = index_router + 39

		grab_mac = arp_cache[index_router:mac_index]

		return grab_mac.replace(router_ip, " ").strip()

	def spoof_detector(self):
		original_router_mac = self.windows_router_mac()

		while True:
			changed_mac = self.windows_router_mac()

			if changed_mac != original_router_mac:
				print(Colors.purple_color(f"Under attack. Your mac is: {str(changed_mac)}"))
			else:
				print("Safe")

			time.sleep(5)


class LinuxInfo(Colors):
	def __init__(self):
		super().__init__()

	def linux_router_mac(self):
		os_platform = WindowsInfo.get_os_platform(self)
		if os_platform == "Linux":
			router_ip = subprocess.check_output(["arp", "-a"]).decode()
			get_mac = re.findall("_gateway.*", router_ip)

		return get_mac[0].split(" ")[3]  # this returns the MAC address on linux

	def linux_spoof_detector(self):
		original_router_mac = self.linux_router_mac()

		while True:
			changed_mac = self.linux_router_mac()

			if changed_mac != original_router_mac:
				print(Colors.purple_color(f"Under attack. Your mac is: {str(changed_mac)}"))
			else:
				print("Safe")

		time.sleep(5)

if __name__ == '__main__':
	get_current_os = WindowsInfo().get_os_platform()

	if get_current_os == "Windows":
		WindowsInfo().spoof_detector()
	elif get_current_os == "Linux":
		LinuxInfo().linux_spoof_detector()
	else:
		print(Colors.red_color(f"Not supporting: {str(get_current_os)} At the momment."))
		exit()
